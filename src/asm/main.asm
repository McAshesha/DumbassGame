asect 0
# Объявить основные метки как внешние
main:               ext # Основная программа
keyboard_handler:   ext # Слушатель нажатий по клавиатуре
default_handler:    ext # Обраточик исключений


# Таблица векторов прерываний (IVT)
dc main, 0              # Вектор запуска/сброса         - вектор 0
dc default_handler, 0   # Невыровненный SP              - вектор 1
dc default_handler, 0   # Невыровненный PC              - вектор 2
dc default_handler, 0   # Недопустимая инструкция       - вектор 3
dc default_handler, 0   # Двойная ошибка                - вектор 4
dc keyboard_handler, 0  # Нажатия по клавиатуре         - вектор 5
align 0x30              # Резервное место для остальных IVT





# Раздел обработчиков исключений
rsect exc_handlers

# Этот обработчик останавливает процессор
default_handler>
    halt





# Основной раздел программы
rsect main
# Слушатель нажатий по клавиатуре
# Адресс нажатой клавиаши находится по
# FF4C hex | FF80 hex (FramePointer) - 52 dec
keyboard_handler>
    di                  # Отключить прерывания
                        # пока не завершится текущее
    lsw r6, -56         # Получить число на индикаторе
    # Включить светоиод клавиатуpы - желтым
    ldi r1, 0b0000000001000000
    ldi r2, 0b1111111110011111
    # Оставить число на индикаторе
    # и индикатор игры
    and r2, r6
    or r1, r6
    ssw r6, -56         # Отправить новые индикаторы

    lsw r0, -52         # Номер нажатой клавиши
    ldi r1, 0xFF00      # Адрес нынешней буквы загаданного слова
    # Бит включения матрицы первого дисплея букв
    ldi r5, 0b0000000001000000
    while               # Цикл по буквам слова
        ldw r1, r2      # Получение буквы слова
        tst r2
    stays pl            # Пока символ не ноль
        if
            cmp r0, r2  # Сравнение нажатой клавиши и букв
        is eq           # Если равны, то пользователь угадал
            # Адрес ячейки с правилами включенных устройств
            # FF4E hex | FF80 hex (FramePointer) - 50 dec
            lsw r6, -50 # Получение включенных устройств
            or  r5, r6  # Добавление нового правила
            ssw r6, -50 # Обновление включенных устройств
            ei          # Включить прерывания
                        # для следующих букв
            rti         # Вернуться назад к исполняемому фрагменту
        fi
        shr r5, 1       # Переход к биту следующего дисплея
        add r1, 2       # Переход к следующей букве
    wend
    # Бит включения главного дисплея
    ldi r5, 0b0000000000000001
    # Адрес ячейки с правилами включенных устройств
    # FF4E hex | FF80 hex (FramePointer) - 50 dec
    lsw r6, -50         # Получение включенных устройств
    or  r5, r6          # Добавление нового правила
    ssw r6, -50         # Обновление включенных устройств

    not r5              # Приостановка главного дисплея
    and r5, r6          # Изменение одного правила
    ssw r6, -50         # Обновление включенных устройств

    lsw r0, -114        # Количество истраченных попыток
    inc r0              # + потраченная попытка
    ssw r0, -114        # Сохранение кол-ва попыток

    lsw r6, -56         # Получить число на индикаторе
    dec r6              # Уменьшить его, тк колво
    ssw r6, -56         # попыток уменьшилось

    if                  # Проверяем чтобы не выйти
        cmp r0, 4       # за границу количества виселиц
    is ls
        jsr draw_gallows# Отправляем картинку на дисплей
    fi
    ei                  # Включить прерывания
                        # для следующих букв
    rti                 # Вернуться назад к исполняемому фрагменту



# Обозначение метки картинок внешней
picture_0: ext          # Картинка начального этапа виселицы
letter_0: ext           # Картинка буквы "а"
words: ext              # Список всех загадываемых слов

# Метка исполняемого фрагмент кода
main>
    addsp -128          # Сдвиг стека для создания
                        # стекового кадра под
                        # управление внешними устройствами
    ldsp fp             # Сохранение указателя на
                        # середину стекового кадра
    addsp -128          # Размер стекового кадра 256 б

    # Включить индикаторы
    # 101 - показать количество попыток 5
    # 10 - желтый светодиод начала игры
    # 10 - желтый светодиод клавиатуры
    ldi r0, 0b0000000001010101
    ssw r0, -56

    lsw r0, -54         # Получить случайное число
                        # по FF4A | FF80 hex - 54 dec
    shl r0, 2           # Сделать его кратным 4

    add r0, r1          # Умножить на 3
    add r0, r1          # r0 кратно 12 
    add r0, r1          # длина 6 буквенного слова
                       
    ldi r0, words       # Подгрузить блок всех слов
    add r1, r0          # Выбрать случайное слово
    
    jsr save_selected_word
    ldi r1, 0           # Количество истраченных попыток
    ssw r1, -114        # угадать букву в виселице

    sub fp, 48          # Сдвиг указателя стекового кадра
                        # на адреса дисплеев букв
    # ОТПРАВЛЯЕМ НА ВЫКЛЮЧЕННЫЕ ДИСПЛЕИ ЗАГАДАННОЕ СЛОВО
    jsr draw_letter     # Отправить букву слова на дисплей
    add r0, 2
    add fp, 8
    jsr draw_letter
    add r0, 2
    add fp, 8
    jsr draw_letter
    add r0, 2
    add fp, 8
    jsr draw_letter
    add r0, 2
    add fp, 8
    jsr draw_letter
    add r0, 2
    add fp, 8
    jsr draw_letter
    add fp, 8           # Возращение указателя стекового кадра

    # ОТПРАВЛЯЕМ НА ВЫКЛЮЧЕННЫЙ ГЛАВНЫЙ ДИСПЛЕЙ НАЧАЛЬНУЮ ВИСЕЛИЦУ
    ldi r0, 0           # Указываем порядковый номер виселицы
    jsr draw_gallows    # Отправляем картинку на дисплей

    while
        ldi r0, 0       # Вечный цикл по попыткам
        tst r0          # угадать букв
    stays z
        if
            lsw r6, -50 # Получение включенных устройств
            shr r6, 1   # Оставить только дисплей букв
            cmp r6, 0b111111
        is eq
            lsw r6, -56 # Получить число на индикаторе
            # Включить светоиод игры - зеленым
            # светодиод клавиатуpы - красным
            ldi r1, 0b0000000001101000
            ldi r2, 0b1111111110000111
            # Оставить число на индикаторе
            and r2, r6
            or r1, r6
            ssw r6, -56 # Отправить новые индикаторы
            break       # Конец игры, слово угадано
        fi
        if
            lsw r6, -114 # Количество истраченных попыток
            cmp r6, 5   # Последняя попытка
        is hs
            # Показать угадываемое слово
            ldi r6, 0b0000000001111110  
            # Адрес ячейки с правилами включенных устройств
            # FF4E hex | FF80 hex (FramePointer) - 50 dec
            ssw r6, -50 # Обновление включенных устройств
            # Отобразить оставшееся колво попыток - 0
            # Включить оба светодиода красным
            ldi r6, 0b0000000001111000
            ssw r6, -56 # Отправить новые индикаторы
            break       # Конец игры, попытки потрачены
        fi

        lsw r6, -56     # Получить число на индикаторе
        # Включить светоиод клавиатуpы - зеленым
        ldi r1, 0b0000000000100000
        ldi r2, 0b1111111110011111
        # Оставить число на индикаторе
        # и индикатор игры
        and r2, r6
        or r1, r6
        ssw r6, -56     # Отправить новые индикаторы
        ei              # Включить прерывания
        # ЖДЕМ ПОКА ПОЛЬЗОВАТЕЛЬ НАЧНЕТ УГАДЫВАТЬ БУКВЫ
        wait            # Ожидание прерываний
        di              # Выключить прерывания
    wend    
    halt                # Конец программы


# Подпрограмма сохраняющая декодированное 
# слово из ASCII кода в Unicode
# ВХОД:     r0 - указатель на букву ASCII
# ВЫХОД:    r0 - указатель на адрес слова в Unicode
save_selected_word:
    push r1
    push r2             # Сохранить прошлые данные регистров
    push r3
    push r4

    move r0, r1         # Исправления порядка идущих аргументов
    ldi r2, 1072        # Unicode первой буквы алфавита
    clr r3              # Очистка счетчика цикла
    ldi r4, 128         # Вспомогательная переменная для свига
    sub fp, r4, fp      # Сдвиг стек кадра на область переменных
                        # FF00 hex
    while               # Цикл по буквам загаданного слова
        cmp r3, 12      # 6 букв по 2 байта - 12 байт
    stays ne
        ldw r1, r3, r0  # Получаем букву загаданного слова
        jsr convert_to_unicode
        sub r0, r2, r0  # Получаем порядковый номер буквы 
        # Сохраняем буквы загаданного слова в области переменных 
        # FF00 hex - FF0F hex
        stw fp, r3, r0  # Сохраняем букву в начало стекового кадра   
        add r3, 2           
    wend
    ldi r0, 0xFFFF      # Конец загаданного слова
    ssw r0, 12          
    move fp, r0         # Возвращение указателя на начало слова
    add fp, r4, fp      # Возвращение стекового кадра
                        # FF80 hex

    pop r4
    pop r3
    pop r2              # Вернуть сохраненные данные регистра
    pop r1
    rts                 # Вернуться назад к исполняемому фрагменту


# Подпрограмма отправляющая на главный 
# дисплей один из вариантов виселицы
# ВХОД:     fp - указатель на адрес конкретного дисплея
#           r0 - число, номер виселицы от 0 до 4
draw_gallows:
    push r0             
    push r1             # Сохранить прошлые данные регистров
    push r2

    shl r0, 7           # Домножаем порядковый номер на 128
    ldi r1, picture_0   # Подгрузка блока виселицы
    add r1, r0          # Получаем картинку
                        # соответствующую номеру

    ldi r1, 128         # Счетчик по словно 64 слова = 128 б
    # Отображение пикселей на дисплее
    # с FF80 (FramePointer) по FFFF - 1024 бита (пикселя)
    while               # Цикл по словам картинки
        tst r1          # 64 слова на картинку
    stays nz            # r1 != 0
        sub r1, 2       # Переход к следующему слову
        ldw r0, r1, r2  # Загрузка слова r2=*(r0+r1)
        stw fp, r1, r2  # На внешнюю матрицу *(fp+r1)=r2
    wend

    pop r2
    pop r1              # Вернуть сохраненные данные регистра
    pop r0 
    rts                 # Вернуться назад к исполняемому фрагменту

# Подпрограмма конвертирующая двухбайтовый 
# ASCII код в unicode
# ВХОД:     r0 - слово ASCII (2 байта)
# ВЫХОД:    r0 - байт Unicode
convert_to_unicode:
    push r1             # Сохранить прошлые данные регистра

    ldi r1, 0b0011111100011111
    and r1, r0    
    move r0, r1
    shr r1, 8
    # r0 - первый байт числа
    # r1 - второй байт числа 
    shl r0, 8
    shr r0, 2
    or r1, r0

    pop r1              # Вернуть сохраненные данные регистра
    rts                 # Вернуться назад к исполняемому фрагменту

# Подпрограмма отправляющая на дисплей букв картинки букв
# ВХОД:     fp - указатель на адрес конкретного дисплея
#           r0 - указатель на адрес ASCII буквы
draw_letter:
    push r0             
    push r1             # Сохранить прошлые данные регистров
    push r2

    ldw r0, r1          # Подгружаем букву                        
    shl r1, 3           # Домножаем на 8, тк
                        # битовые строки занимают 8 байт
    ldi r0, letter_0    # Подгрузка битовых строк нулевой буквы
    add r1, r0          # Получение адреса необходимых 
                        # битовых строк
    ldi r1, 8           # Счетчик по словно 4 слова = 8 б
    # Отображение пикселей на дисплее с буквами
    # с FF50 (FramePointer) по FF7F - 384 бита (пикселя)
    while               # Цикл по словам букв
        tst r1          # 4 слова на 1 букву
    stays nz            # r1 != 0
        sub r1, 2       # Переход к следующему слову
        ldw r0, r1, r2  # Загрузка слова r2=*(r0+r1)
        stw fp, r1, r2  # На внешнюю матрицу *(fp+r1)=r2
    wend

    pop r2
    pop r1              # Вернуть сохраненные данные регистра
    pop r0
    rts                 # Вернуться назад к исполняемому фрагменту


# Секция меток констант матриц ресурсов (виселица, буквы...)
rsect matrix_resources
# Список слов используемых в игре
words>
    dc "власть", "льгота", "пузырь", "пустяк", "балкон", "оценка", "фигура", "отпуск", "провал", "ребята", "святой", "эшелон", "убыток", "плетка", "платок", "футляр", "панель", "взгляд", "матрос", "мелочь", "бревно", "корпус", "печать", "пленум", "хозяин", "память", "формат", "горечь", "ученик", "прыжок", "чайник", "воздух", "бездна", "приезд", "гвоздь", "эмоция", "эбонит", "версия", "парень", "ызмалу", "премия", "приказ", "улыбка", "ладонь", "банкир", "бедняк", "логика", "сделка", "порция", "расход", "партия", "запись", "долбеж", "корень", "высота", "альбом", "объект", "сигнал", "теория", "обычай", "термин", "шинель", "график", "макияж", "дворец", "убийца", "запрос", "музыка", "старик", "раздел", "стрела", "дракон", "община", "летчик", "свинья", "тюрьма", "предок", "фляжка", "бюджет", "родные", "шахтер", "призыв", "угроза", "монета", "подъем", "китаец", "служба", "пробка", "огурец", "модуль", "вахтер", "патрон", "голубь", "стенка", "фонарь", "долина", "пенсия", "стойка", "футбол", "символ", "минута", "отмена", "боевик", "стадия", "пиджак", "станок", "секция", "потеря", "рванье", "кредит", "солдат", "злость", "клиент", "спектр", "солнце", "случай", "лошадь", "пейзаж", "проект", "йогурт", "сектор", "доступ", "костюм", "штырек", "эврика", "дьявол", "дружба", "расчет", "период", "гонщик", "вокзал", "гнилье", "любовь", "экипаж", "ювелир", "маневр", "гнездо", "пленка", "камень", "кресло", "дверца", "диалог", "почерк", "выпуск", "свекла", "медаль", "бандит", "фашист", "проезд", "лагерь", "мораль", "родина", "знаток", "тысяча", "дизайн", "ремонт", "житель", "червяк", "эгоизм", "офицер", "пальто", "кошмар", "фактор", "платье", "певица", "утенок", "регион", "акцент", "посуда", "японец", "спинка", "ацетон", "глазок", "молния", "отъезд", "бизнес", "апрель", "подвал", "звание", "атеизм", "развод", "курица", "аутизм", "ярость", "лозунг", "деталь", "печаль", "юбилей", "курьез", "строка", "цветок", "жертва", "диплом", "костер", "привет", "климат", "судьба", "синтез", "январь", "девица", "аспект", "тряпка", "деньги", "эпизод", "внучка", "индекс", "магний", "смерть", "спичка", "победа", "орудие", "листок", "оружие", "тройка", "взятка", "съемка", "надзор", "лекция", "подвиг", "студия", "поэзия", "ерунда", "журнал", "джинсы", "старец", "градус", "модель", "урожай", "творец", "столик", "ошибка", "шерсть", "поляна", "письмо", "юность", "снаряд", "могила", "платеж", "трубка", "связка", "приход", "выгода", "ноябрь", "мундир", "импорт", "польза", "гибель", "запрет", "снимок", "ученый", "верста", "мастер", "август", "стекло", "добыча", "здание"

# Картинки виселиц
picture_0>
    dc 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0011111111111111, 0b1111111111111100, 0b0011111111111111, 0b1111111111111100, 0b0000000000000000, 0b0000000000000000

picture_1>
    dc 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0011111111111111, 0b1111111111111100, 0b0011111111111111, 0b1111111111111100, 0b0000000000000000, 0b0000000000000000

picture_2>
    dc 0b0000000000000000, 0b0000000000000000, 0b0000111111111111, 0b1111111111110000, 0b0011111111111111, 0b1111111111111110, 0b0011111111111111, 0b1111111111111110, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0000000000000000, 0b0011111111111111, 0b1111111111111100, 0b0011111111111111, 0b1111111111111100, 0b0000000000000000, 0b0000000000000000

picture_3>
    dc 0b0000000000000000, 0b0000000000000000, 0b0000111111111111, 0b1111111111110000, 0b0011111111111111, 0b1111111111111110, 0b0011111111111111, 0b1111111111111110, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0011110000000000, 0b0000111100000000, 0b0011110000000000, 0b0000111100000000, 0b0100001000000000, 0b0000111100000000, 0b1000000100000000, 0b0000111100000000, 0b1000000100000000, 0b0000111100000000, 0b0100001000000000, 0b0000111100000000, 0b0011110000000000, 0b0000111100000000, 0b0000000000000000, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0010010000000000, 0b0000111100000000, 0b0010010000000000, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0111111000000000, 0b0000111100000001, 0b1111111110000000, 0b0000111100000011, 0b1111111111000000, 0b0000111100000010, 0b1111111101000000, 0b0000111100000010, 0b1111111101000000, 0b0000111100000010, 0b0100001001000000, 0b0000111100000000, 0b0100001000000000, 0b0000111100000000, 0b1100001100000000, 0b0000111100001111, 0b1111111111110000, 0b0000111100000011, 0b0000000011000000, 0b0000111100000011, 0b0000000011000000, 0b0011111111111111, 0b1111111111111100, 0b0011111111111111, 0b1111111111111100, 0b0000000000000000, 0b0000000000000000

picture_4>
    dc 0b0000000000000000, 0b0000000000000000, 0b0000111111111111, 0b1111111111110000, 0b0011111111111111, 0b1111111111111110, 0b0011111111111111, 0b1111111111111110, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0001100000000000, 0b0000111100000000, 0b0011110000000000, 0b0000111100000000, 0b0011110000000000, 0b0000111100000000, 0b0111111000000000, 0b0000111100000000, 0b1100001100000000, 0b0000111100000000, 0b1100001100000000, 0b0000111100000000, 0b0111111000000000, 0b0000111100000100, 0b0011110000100000, 0b0000111100000000, 0b0001100000000000, 0b0000111101000000, 0b0111111000100100, 0b0000111100000001, 0b1111111110000000, 0b0000111100000011, 0b1111111111000100, 0b0000111100010010, 0b1111111101010000, 0b0000111100000010, 0b1111111101000000, 0b0000111100000010, 0b0100001001001000, 0b0000111101000000, 0b0100001000000000, 0b0000111100000000, 0b1100001100000000, 0b0000111100000100, 0b0000000000010000, 0b0000111101010000, 0b0000000000000000, 0b0000111100000000, 0b0000000000100000, 0b0000111100100000, 0b0000000000000000, 0b0000111100001111, 0b1111111111110000, 0b0000111100000011, 0b0000000011000000, 0b0000111100000011, 0b0000000011000000, 0b0011111111111111, 0b1111111111111100, 0b0011111111111111, 0b1111111111111100, 0b0000000000000000, 0b0000000000000000



# Русский алфавит от A-0 до Я-32
letter_0>
    dc 0b0000000011111110, 0b0001000100010001, 0b0001000100010001, 0b1111111000000000

letter_1>
    dc 0b0000000011111111, 0b1000100110001001, 0b1000100110001001, 0b1111000100000000

letter_2>
    dc 0b0000000011111111, 0b1000100110001001, 0b1000100110001001, 0b1111011000000000

letter_3>
    dc 0b0000000011111111, 0b0000000100000001, 0b0000000100000001, 0b0000000100000000

letter_4>
    dc 0b0000000011000000, 0b0111111001000001, 0b0100000101111110, 0b1100000000000000

letter_5>
    dc 0b0000000011111111, 0b1000100110001001, 0b1000100110001001, 0b1000100100000000

letter_6>
    dc 0b0000000011110111, 0b0000100011111111, 0b1111111100001000, 0b1111011100000000

letter_7>
    dc 0b0000000001000010, 0b1000000110001001, 0b1000100110001001, 0b0111011000000000

letter_8>
    dc 0b0000000011111110, 0b0100000000100000, 0b0001000000001000, 0b1111111000000000

letter_9>
    dc 0b0000000011111110, 0b0100000000100001, 0b0001000100001000, 0b1111111000000000

letter_10>
    dc 0b0000000011111111, 0b0000100000001000, 0b0001010000100010, 0b1100000100000000

letter_11>
    dc 0b0000000011110000, 0b0000111000000001, 0b0000000100000001, 0b1111111100000000

letter_12>
    dc 0b0000000011111111, 0b0000001000000100, 0b0000010000000010, 0b1111111100000000

letter_13>
    dc 0b0000000011111111, 0b0000100000001000, 0b0000100000001000, 0b1111111100000000

letter_14>
    dc 0b0000000001111110, 0b1000000110000001, 0b1000000110000001, 0b0111111000000000

letter_15>
    dc 0b0000000011111111, 0b0000000100000001, 0b0000000100000001, 0b1111111100000000

letter_16>
    dc 0b0000000011111111, 0b0000100100001001, 0b0000100100001001, 0b0000111100000000

letter_17>
    dc 0b0000000001111110, 0b1000000110000001, 0b1000000110000001, 0b0100001000000000

letter_18>
    dc 0b0000000000000001, 0b0000000111111111, 0b1111111100000001, 0b0000000100000000

letter_19>
    dc 0b0000000000000011, 0b1000110001110000, 0b0011000000001100, 0b0000001100000000

letter_20>
    dc 0b0000000000111100, 0b0100001011111111, 0b1111111101000010, 0b0011110000000000

letter_21>
    dc 0b0000000011000011, 0b0010010000011000, 0b0001100000100100, 0b1100001100000000

letter_22>
    dc 0b0000000001111111, 0b0100000001000000, 0b0100000001000000, 0b0111111110000000

letter_23>
    dc 0b0000000000001111, 0b0001000000010000, 0b0001000000010000, 0b1111111100000000

letter_24>
    dc 0b0000000001111111, 0b0100000001111111, 0b0111111101000000, 0b0111111100000000

letter_25>
    dc 0b0000000001111111, 0b0100000001111111, 0b0111111101000000, 0b1111111110000000

letter_26>
    dc 0b0000000000000001, 0b1111111110001000, 0b1000100010001000, 0b1111100000000000

letter_27>
    dc 0b0000000011111111, 0b1000100010001000, 0b1111000000000000, 0b1111111100000000

letter_28>
    dc 0b0000000011111111, 0b1000100010001000, 0b1000100010001000, 0b1111100000000000

letter_29>
    dc 0b0000000001000010, 0b1001000110010001, 0b1001000110010001, 0b0111111000000000

letter_30>
    dc 0b0000000011111111, 0b0001100001111110, 0b1000000110000001, 0b0111111000000000

letter_31>
    dc 0b0000000010000110, 0b0100100100101001, 0b0001100100001001, 0b1111111100000000

end.
